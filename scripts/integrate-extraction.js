#!/usr/bin/env node

/**
 * Script para integrar datos del m√≥dulo de extracci√≥n
 * Conecta el repositorio de extracci√≥n con el pipeline principal
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const PROJECT_ROOT = join(__dirname, '..');
const EXTRACTION_PATH = join(PROJECT_ROOT, 'extraction');

/**
 * Verifica que el submodule de extracci√≥n est√© disponible
 */
function checkExtractionModule() {
  if (!existsSync(EXTRACTION_PATH)) {
    console.error('‚ùå Error: El m√≥dulo de extracci√≥n no est√° disponible');
    console.log('üí° Ejecuta: git submodule update --init --recursive');
    process.exit(1);
  }
  
  console.log('‚úÖ M√≥dulo de extracci√≥n encontrado');
}

/**
 * Lee la configuraci√≥n del m√≥dulo de extracci√≥n
 */
function readExtractionConfig() {
  const packagePath = join(EXTRACTION_PATH, 'package.json');
  
  if (!existsSync(packagePath)) {
    console.error('‚ùå Error: No se encontr√≥ package.json en el m√≥dulo de extracci√≥n');
    process.exit(1);
  }
  
  const packageJson = JSON.parse(readFileSync(packagePath, 'utf8'));
  console.log('üì¶ Configuraci√≥n del m√≥dulo de extracci√≥n:', packageJson.name);
  
  return packageJson;
}

/**
 * Crea un enlace simb√≥lico o copia archivos seg√∫n sea necesario
 */
function integrateExtractionData() {
  const extractionSrc = join(EXTRACTION_PATH, 'src');
  const targetPath = join(PROJECT_ROOT, 'src', 'extraction');
  
  console.log('üîó Integrando datos de extracci√≥n...');
  console.log(`   Desde: ${extractionSrc}`);
  console.log(`   Hacia: ${targetPath}`);
  
  // Aqu√≠ puedes agregar l√≥gica espec√≠fica para integrar los datos
  // Por ejemplo, copiar archivos, crear enlaces, etc.
  
  console.log('‚úÖ Integraci√≥n completada');
}

/**
 * Funci√≥n principal
 */
function main() {
  console.log('üöÄ Iniciando integraci√≥n del m√≥dulo de extracci√≥n...\n');
  
  try {
    checkExtractionModule();
    readExtractionConfig();
    integrateExtractionData();
    
    console.log('\nüéâ Integraci√≥n completada exitosamente!');
    console.log('üí° Ahora puedes usar los datos del m√≥dulo de extracci√≥n en tu pipeline');
    
  } catch (error) {
    console.error('‚ùå Error durante la integraci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as integrateExtraction }; 